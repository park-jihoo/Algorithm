name: CI Pipeline

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  format_and_update_readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 전체 git 기록을 가져옴

      # 코드 포맷팅 단계
      - name: Prettify Code
        uses: creyD/prettier_action@v4.3

      - name: Google Java Format
        uses: axel-op/googlejavaformat-action@v3.6.0

      - name: Run Black Formatter
        uses: psf/black@stable
        with:
          jupyter: true

      - name: Reformat SQL Files
        uses: credfeto/action-sql-format@v1.4.1

      - name: Clang-format Lint (C)
        uses: DoozyX/clang-format-lint-action@v0.16.2
        with:
          inplace: true

      - name: Generate README.md
        run: |
          echo "# Algorithms Archive" > README.md
          echo "" >> README.md
          echo "This project contains the following subfolders (up to 3 levels deep):" >> README.md
          echo "" >> README.md
          echo "| Platform   | Difficulty | Problem Name | Languages | Last Commit Date |" >> README.md
          echo "|------------|------------|--------------|-----------|------------------|" >> README.md
      
            find . -type d -not -path './.*' -mindepth 3 -maxdepth 3 | while read -r folder; do
            folder_path=${folder#./}
            platform=$(echo "$folder_path" | cut -d'/' -f1)
            difficulty=$(echo "$folder_path" | cut -d'/' -f2)
            problem_name=$(basename "$folder")
            last_commit_date=$(git log -1 --format=%cs -- "$folder")
      
            # Find all code files and get unique file extensions
            languages=$(find "$folder" -type f \( -name '*.c' -or -name '*.h' -or -name '*.java' -or -name '*.py' -or -name '*.sql' -or -name '*.cpp' -or -name '*.js' -or -name '*.cc' \) \
              | awk -F. '{print $NF}' | sort | uniq | while read -r ext; do
                case "$ext" in
                  c) echo "C" ;;
                  h) echo "C Header" ;;
                  java) echo "Java" ;;
                  py) echo "Python" ;;
                  sql) echo "SQL" ;;
                  cpp) echo "C++" ;;
                  cc) echo "C++" ;;
                  js) echo "JavaScript" ;;
                  *) echo "Unknown" ;;
                esac
              done | paste -sd "," -)
      
            # If no language is found, mark it as "Unknown"
            if [ -z "$languages" ]; then
              languages="Unknown"
            fi
      
            echo "| ${platform} | ${difficulty} | [${problem_name}](./${folder_path}/) | ${languages} | ${last_commit_date} |" >> README.md
          done
      
          echo "" >> README.md
          echo "Click on the problem names to view their contents." >> README.md


      # 모든 변경 사항 커밋 및 푸시
      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if git diff --quiet; then
            echo "No changes detected, skipping commit."
          else
            git add .
            git commit -m "Code formatting and README update"
            git push
          fi
