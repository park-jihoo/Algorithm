name: CI Pipeline

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  format_and_update_readme:
    if: github.event.commits.*.message contains 'Time'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Prettify Code
        run: |
          npm install prettier -g
          prettier --write "**/*.{js,md}"

      - name: Google Java Format
        run: |
          curl -LJO https://github.com/google/google-java-format/releases/download/v1.16.0/google-java-format-1.16.0-all-deps.jar
          find . -name "*.java" | xargs java -jar google-java-format-1.16.0-all-deps.jar --replace
          rm google-java-format-1.16.0-all-deps.jar

      - name: Run Black Formatter
        run: |
          pip install black
          black --line-length 88 --include '\.ipynb$|\.py$' .

      - name: Reformat SQL Files
        run: |
          pip install sqlparse
          find . -name '*.sql' -exec sh -c 'sqlformat -r --reindent --keywords upper {} > {}.tmp && mv {}.tmp {}' \;

      - name: Clang-format Lint (C/C++)
        run: |
          sudo apt-get install -y clang-format
          find . -name "*.[ch]" -o -name "*.cpp" -o -name "*.cc" -exec clang-format -i {} +

      - name: Generate README.md
        run: |
          echo "# Algorithms Archive" > README.md
          echo "" >> README.md
          echo "This project contains the following subfolders (up to 3 levels deep):" >> README.md
          echo "" >> README.md
          echo "| Platform   | Difficulty | Problem Name | Languages | Last Commit Date |" >> README.md
          echo "|------------|------------|--------------|-----------|------------------|" >> README.md
      
          find . -type d -not -path './.*' -mindepth 3 -maxdepth 3 | while read -r folder; do
            folder_path=${folder#./}
            platform=$(echo "$folder_path" | cut -d'/' -f1)
            difficulty=$(echo "$folder_path" | cut -d'/' -f2)
            problem_name=$(basename "$folder")
            last_commit_date=$(git log -1 --format=%cs -- "$folder")
            
            languages=$(find "$folder" -type f \( -name '*.c' -or -name '*.h' -or -name '*.java' -or -name '*.py' -or -name '*.sql' -or -name '*.cpp' -or -name '*.js' -or -name '*.cc' \) \
            | awk -F. '{print $NF}' | sort | uniq | while read -r ext; do
              case "$ext" in
                c) echo "C" ;;
                h) echo "C Header" ;;
                java) echo "Java" ;;
                py) echo "Python" ;;
                sql) echo "SQL" ;;
                cpp | cc) echo "C++" ;;
                js) echo "JavaScript" ;;
                *) echo "Unknown" ;;
              esac
            done | paste -sd "," -)
      
            [ -z "$languages" ] && languages="Unknown"
      
            echo "| ${platform} | ${difficulty} | [${problem_name}](./${folder_path}/) | ${languages} | ${last_commit_date} |" >> README.md
          done
      
          echo "" >> README.md
          echo "Click on the problem names to view their contents." >> README.md

            - name: Generate algorithms.json
        run: |
          echo "[" > algorithms.json
          find . -type d -not -path './.*' -mindepth 3 -maxdepth 3 | while read -r folder; do
            folder_path=${folder#./}
            platform=$(echo "$folder_path" | cut -d'/' -f1)
            difficulty=$(echo "$folder_path" | cut -d'/' -f2)
            problem_name=$(basename "$folder")
            last_commit_date=$(git log -1 --format=%cs -- "$folder")

            languages=$(find "$folder" -type f \( -name '*.c' -or -name '*.h' -or -name '*.java' -or -name '*.py' -or -name '*.sql' -or -name '*.cpp' -or -name '*.js' -or -name '*.cc' \) \
            | awk -F. '{print $NF}' | sort | uniq | while read -r ext; do
              case "$ext" in
                c) echo "C" ;;
                h) echo "C Header" ;;
                java) echo "Java" ;;
                py) echo "Python" ;;
                sql) echo "SQL" ;;
                cpp | cc) echo "C++" ;;
                js) echo "JavaScript" ;;
                *) echo "Unknown" ;;
              esac
            done | paste -sd "," -)

            [ -z "$languages" ] && languages="Unknown"

            echo "  {" >> algorithms.json
            echo "    \"platform\": \"${platform}\"," >> algorithms.json
            echo "    \"difficulty\": \"${difficulty}\"," >> algorithms.json
            echo "    \"problem_name\": \"${problem_name}\"," >> algorithms.json
            echo "    \"languages\": \"${languages}\"," >> algorithms.json
            echo "    \"last_commit_date\": \"${last_commit_date}\"" >> algorithms.json
            echo "  }," >> algorithms.json
          done

          # Remove trailing comma and close the JSON array
          sed -i '$ s/,$//' algorithms.json
          echo "]" >> algorithms.json

          
      # 모든 변경 사항 커밋 및 푸시
      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if git diff --quiet; then
            echo "No changes detected, skipping commit."
          else
            git add .
            git commit -m "Code formatting and README update"
            git push
          fi
